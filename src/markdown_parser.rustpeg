#[pub]
doc -> Element
  = block

block -> Element
  = blank_line* (heading / para / plain)

heading -> Element
  = atx_heading

atx_inline -> Element
  = !newline !(sp "#"* sp newline) xxx_simple_text

atx_start -> Element
  = ("######" / "#####" / "####" / "###" / "##" / "#")
    { Element::new(Key::from_header_level(match_str.len())) }

atx_heading -> Element
  = s:atx_start sp i:atx_inline+ (sp "#"* sp)? newline
    { Element::new_with_children(s.key, i) }

para -> Element
  = nonindent_space a:inlines blank_line+
    { a.put_key(Para) }

plain -> Element
  = a:inlines
    { a.put_key(Plain) }

inlines -> Element
  = a:(!endline inline / e:endline &inline { e })+ endline?
    { Element::new_list(a) }

inline -> Element
  = xxx_simple_text / endline

xxx_simple_text -> Element
  = xxx_simple_str { Element::new_text(match_str) }

xxx_simple_str
  = [a-zA-Z0-9]+

nonindent_space
  = "   " / "  " / " " / ""

endline -> Element
  = line_break / terminal_endline / normal_endline

normal_endline -> Element
  = sp newline !blank_line !">" !atx_start
    !(line ("="+ / "-"+) newline)
    { Element::new_text("\n").put_key(Space) }

terminal_endline -> Element
  = sp newline eof { Element::new(Terminal) }

line_break -> Element
  = "  " normal_endline { Element::new(LineBreak) }

blank_line = sp newline
eof        = !.
sp         = spacechar*
spacechar  = " " / "\t"
newline    = "\n" / "\r" "\n"? { () }

line -> Element
  = a:raw_line { Element::new_text(a.as_slice()) }

raw_line -> String
  = non_breaking_chars_and_newline / a:any_chars eof { a }

non_breaking_chars_and_newline -> String
  = (!"\r" !"\n" .)* newline { match_str.to_string() }

any_chars -> String
  = .+ { match_str.to_string() }
