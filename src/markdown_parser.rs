// Generated by generate.sh.
// You may want to edit markdown_parser.rustpeg or markdown_parser.preamble.rs.
#![allow(non_snake_case, unused)]

#[deriving(PartialEq, Show)]
pub enum Key {
    Text,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6
}

impl Key {
    fn from_header_level(u: uint) -> Key {
        match u {
            1 => H1,
            2 => H2,
            3 => H3,
            4 => H4,
            5 => H5,
            6 => H6,
            _ => unreachable!()
        }
    }
}

pub struct Element {
    pub key: Key,
    pub children: Vec<Element>,
    pub text: Option<String>
}

impl Element {
    fn new(key: Key) -> Element {
        Element {
            key: key,
            children: vec![],
            text: None
        }
    }

    fn new_with_children(key: Key, children: Vec<Element>) -> Element {
        Element {
            key: key,
            children: children,
            text: None
        }
    }

    fn new_text(s: &str) -> Element {
        Element {
            key: Text,
            children: vec![],
            text: Some(s.to_string())
        }
    }
}
// Generated by rust-peg. Do not edit.
enum ParseResult<T> { Matched(uint, T), Failed, }
struct ParseState {
    max_err_pos: uint,
    expected: ::std::collections::HashSet<&'static str>,
}
impl ParseState {
    fn new() -> ParseState {
        ParseState{max_err_pos: 0,
                   expected: ::std::collections::HashSet::new(),}
    }
    fn mark_failure(&mut self, pos: uint, expected: &'static str) ->
     ParseResult<()> {
        if pos > self.max_err_pos {
            self.max_err_pos = pos;
            self.expected.clear();
        }
        if pos == self.max_err_pos { self.expected.insert(expected); }
        Failed
    }
}
fn slice_eq(input: &str, state: &mut ParseState, pos: uint, m: &'static str)
 -> ParseResult<()> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           input.as_bytes().slice(pos, pos + l) == m.as_bytes() {
        Matched(pos + l, ())
    } else { state.mark_failure(pos, m) }
}
fn any_char(input: &str, state: &mut ParseState, pos: uint) ->
 ParseResult<()> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        Matched(input.char_range_at(pos).next, ())
    } else { state.mark_failure(pos, "<character>") }
}
fn pos_to_line(input: &str, pos: uint) -> (uint, uint) {
    let mut remaining = pos;
    let mut lineno: uint = 1;
    for line in input.lines() {
        let line_length = line.len() + 1;
        if remaining < line_length { return (lineno, remaining + 1); }
        remaining -= line_length;
        lineno += 1;
    }
    return (lineno, remaining + 1);
}
fn parse_doc<'input>(input: &'input str, state: &mut ParseState, pos: uint) ->
 ParseResult<Element> {
    parse_heading(input, state, pos)
}
fn parse_heading<'input>(input: &'input str, state: &mut ParseState,
                         pos: uint) -> ParseResult<Element> {
    parse_atx_heading(input, state, pos)
}
fn parse_atx_inline<'input>(input: &'input str, state: &mut ParseState,
                            pos: uint) -> ParseResult<()> {
    {
        let seq_res =
            {
                let assert_res = parse_newline(input, state, pos);
                match assert_res {
                    Failed => Matched(pos, ()),
                    Matched(..) => Failed,
                }
            };
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res =
                        {
                            let assert_res =
                                {
                                    let seq_res = parse_sp(input, state, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    {
                                                        let mut repeat_pos =
                                                            pos;
                                                        loop  {
                                                            let pos =
                                                                repeat_pos;
                                                            let step_res =
                                                                slice_eq(input,
                                                                         state,
                                                                         pos,
                                                                         "#");
                                                            match step_res {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    repeat_pos
                                                                        =
                                                                        newpos;
                                                                }
                                                                Failed => {
                                                                    break ;
                                                                }
                                                            }
                                                        }
                                                        Matched(repeat_pos,
                                                                ())
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_sp(input,
                                                                         state,
                                                                         pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    parse_newline(input,
                                                                                  state,
                                                                                  pos)
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                };
                            match assert_res {
                                Failed => Matched(pos, ()),
                                Matched(..) => Failed,
                            }
                        };
                    match seq_res {
                        Matched(pos, _) => {
                            parse_xxx_simple_str(input, state, pos)
                        }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_atx_start<'input>(input: &'input str, state: &mut ParseState,
                           pos: uint) -> ParseResult<Element> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let choice_res = slice_eq(input, state, pos, "######");
                    match choice_res {
                        Matched(pos, value) => Matched(pos, value),
                        Failed => {
                            let choice_res =
                                slice_eq(input, state, pos, "#####");
                            match choice_res {
                                Matched(pos, value) => Matched(pos, value),
                                Failed => {
                                    let choice_res =
                                        slice_eq(input, state, pos, "####");
                                    match choice_res {
                                        Matched(pos, value) =>
                                        Matched(pos, value),
                                        Failed => {
                                            let choice_res =
                                                slice_eq(input, state, pos,
                                                         "###");
                                            match choice_res {
                                                Matched(pos, value) =>
                                                Matched(pos, value),
                                                Failed => {
                                                    let choice_res =
                                                        slice_eq(input, state,
                                                                 pos, "##");
                                                    match choice_res {
                                                        Matched(pos, value) =>
                                                        Matched(pos, value),
                                                        Failed =>
                                                        slice_eq(input, state,
                                                                 pos, "#"),
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = input.slice(start_pos, pos);
                        Matched(pos,
                                {
                                    Element::new(Key::from_header_level(match_str.len()))
                                })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_atx_heading<'input>(input: &'input str, state: &mut ParseState,
                             pos: uint) -> ParseResult<Element> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_atx_start(input, state, pos);
            match seq_res {
                Matched(pos, s) => {
                    {
                        let seq_res = parse_sp(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            let mut repeat_value = vec!();
                                            loop  {
                                                let pos = repeat_pos;
                                                let step_res =
                                                    parse_atx_inline(input,
                                                                     state,
                                                                     pos);
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                        repeat_value.push(value);
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            if repeat_value.len() >= 1u {
                                                Matched(repeat_pos, ())
                                            } else { Failed }
                                        };
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    match {
                                                              let seq_res =
                                                                  parse_sp(input,
                                                                           state,
                                                                           pos);
                                                              match seq_res {
                                                                  Matched(pos,
                                                                          _)
                                                                  => {
                                                                      {
                                                                          let seq_res =
                                                                              {
                                                                                  let mut repeat_pos =
                                                                                      pos;
                                                                                  loop 
                                                                                       {
                                                                                      let pos =
                                                                                          repeat_pos;
                                                                                      let step_res =
                                                                                          slice_eq(input,
                                                                                                   state,
                                                                                                   pos,
                                                                                                   "#");
                                                                                      match step_res
                                                                                          {
                                                                                          Matched(newpos,
                                                                                                  value)
                                                                                          =>
                                                                                          {
                                                                                              repeat_pos
                                                                                                  =
                                                                                                  newpos;
                                                                                          }
                                                                                          Failed
                                                                                          =>
                                                                                          {
                                                                                              break
                                                                                                  ;
                                                                                          }
                                                                                      }
                                                                                  }
                                                                                  Matched(repeat_pos,
                                                                                          ())
                                                                              };
                                                                          match seq_res
                                                                              {
                                                                              Matched(pos,
                                                                                      _)
                                                                              =>
                                                                              {
                                                                                  parse_sp(input,
                                                                                           state,
                                                                                           pos)
                                                                              }
                                                                              Failed
                                                                              =>
                                                                              Failed,
                                                                          }
                                                                      }
                                                                  }
                                                                  Failed =>
                                                                  Failed,
                                                              }
                                                          } {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_newline(input,
                                                                              state,
                                                                              pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            input.slice(start_pos,
                                                                                        pos);
                                                                        Matched(pos,
                                                                                {
                                                                                    Element::new_with_children(s.key,
                                                                                                               vec!(Element
                                                                                                                    ::
                                                                                                                    new_text
                                                                                                                    (
                                                                                                                    match_str
                                                                                                                    )))
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_xxx_simple_str<'input>(input: &'input str, state: &mut ParseState,
                                pos: uint) -> ParseResult<()> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let step_res =
                if input.len() > pos {
                    let ::std::str::CharRange { ch, next } =
                        input.char_range_at(pos);
                    match ch {
                        'a' ...'z' | 'A' ...'Z' | '0' ...'9' =>
                        Matched(next, ()),
                        _ => state.mark_failure(pos, "[a-zA-Z0-9]"),
                    }
                } else { state.mark_failure(pos, "[a-zA-Z0-9]") };
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        if repeat_value.len() >= 1u {
            Matched(repeat_pos, ())
        } else { Failed }
    }
}
fn parse_sp<'input>(input: &'input str, state: &mut ParseState, pos: uint) ->
 ParseResult<()> {
    {
        let mut repeat_pos = pos;
        loop  {
            let pos = repeat_pos;
            let step_res = parse_spacechar(input, state, pos);
            match step_res {
                Matched(newpos, value) => { repeat_pos = newpos; }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, ())
    }
}
fn parse_spacechar<'input>(input: &'input str, state: &mut ParseState,
                           pos: uint) -> ParseResult<()> {
    {
        let choice_res = slice_eq(input, state, pos, " ");
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => slice_eq(input, state, pos, "\t"),
        }
    }
}
fn parse_newline<'input>(input: &'input str, state: &mut ParseState,
                         pos: uint) -> ParseResult<()> {
    {
        let choice_res = slice_eq(input, state, pos, "\n");
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = slice_eq(input, state, pos, "\r");
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    match slice_eq(input, state, pos, "\n") {
                                        Matched(newpos, value) => {
                                            Matched(newpos, Some(value))
                                        }
                                        Failed => { Matched(pos, None) }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos, { () })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
pub fn doc<'input>(input: &'input str) -> Result<Element, String> {
    let mut state = ParseState::new();
    match parse_doc(input, &mut state, 0) {
        Matched(pos, value) => { if pos == input.len() { return Ok(value) } }
        _ => { }
    }
    let expected = state.expected.to_string().escape_default();
    Err(format!("Error at {}: Expected {}" , pos_to_line (
                input , state . max_err_pos ) , expected))
}
